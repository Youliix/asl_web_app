import unittest
from unittest.mock import patch, MagicMock
from app.endpoints.endpoint import (
    predict_class_from_features,
    calculate_features_from_wrist,
)
from app.db import save_image_content


class TestPredictClassFromFeatures(unittest.TestCase):
    @patch("app.detect")
    def test_predict_class_from_features_valid(self, mock_predict):
        mock_predict.return_value = [0]
        features = {
            "angles": [
                -25.346841584386652,
                -51.28157536670155,
                -62.27710635170531,
                -67.08371129889542,
                -73.3043997327938,
                -71.46013871992177,
                -66.7599059216626,
                -68.67258959582098,
                -82.4707930792345,
                -79.14235470654648,
                -74.3036836427781,
                -78.76743195766154,
                -91.11445830383529,
                -88.24661333542699,
                -86.82541003036901,
                -89.7073119584989,
                -100.82960934259535,
                -97.22782025616333,
                -97.17100145316518,
                -98.63481809413139,
            ],
            "distances": [
                0.10847317778356967,
                0.28378300538191276,
                0.4311789998556438,
                0.5418442444920896,
                0.43191229590175695,
                0.4988635057774328,
                0.35987521250485777,
                0.3317708411821813,
                0.4343719990754325,
                0.45523568020602634,
                0.28382363968101315,
                0.29146886741788336,
                0.4174250221005466,
                0.45368837630227776,
                0.284596783675816,
                0.2796023610871029,
                0.39809099260834196,
                0.4390135208658338,
                0.31350776650462503,
                0.28494120425257063,
                0.210402164150577,
                0.06795814002585436,
                0.05570339694330368,
                0.04425874566153798,
                0.3055371748869604,
            ],
            "keypoints": {
                "x_0": 0.4423164427280426,
                "y_0": 0.7711466550827026,
                "x_4": 0.6533029079437256,
                "y_4": 0.2720676064491272,
                "x_8": 0.5629804730415344,
                "y_8": 0.46209636330604553,
                "x_12": 0.4990922212600708,
                "y_12": 0.4852609932422638,
                "x_16": 0.4437447488307953,
                "y_16": 0.49154794216156006,
                "x_20": 0.39953646063804626,
                "y_20": 0.4894351661205292,
            },
        }
        expected_class = "A"
        result = predict_class_from_features(features)
        self.assertEqual(
            result, expected_class, f"Expected class {expected_class}, but got {result}"
        )


class TestCalculateFeaturesFromWrist(unittest.TestCase):
    def test_calculate_features_from_wrist_valid(self):
        hand_landmarks = [
            {
                "x": 0.3324437439441681,
                "y": 0.6147140264511108,
                "z": -5.552321908908198e-07,
            },
            {
                "x": 0.3978738486766815,
                "y": 0.569989800453186,
                "z": -0.04210803285241127,
            },
            {
                "x": 0.4401244521141052,
                "y": 0.44105640053749084,
                "z": -0.05799785256385803,
            },
            {
                "x": 0.45068857073783875,
                "y": 0.3189402222633362,
                "z": -0.06967686861753464,
            },
            {
                "x": 0.4511581361293793,
                "y": 0.2099604308605194,
                "z": -0.07877379655838013,
            },
            {
                "x": 0.38440653681755066,
                "y": 0.3441978096961975,
                "z": -0.043101146817207336,
            },
            {
                "x": 0.36958566308021545,
                "y": 0.3131364583969116,
                "z": -0.08604339510202408,
            },
            {
                "x": 0.37127968668937683,
                "y": 0.4236035943031311,
                "z": -0.10844804346561432,
            },
            {
                "x": 0.3776931166648865,
                "y": 0.5113438367843628,
                "z": -0.11536011844873428,
            },
            {
                "x": 0.3299528956413269,
                "y": 0.3525715470314026,
                "z": -0.03509664535522461,
            },
            {
                "x": 0.3137257695198059,
                "y": 0.3380701243877411,
                "z": -0.08477221429347992,
            },
            {
                "x": 0.3188595175743103,
                "y": 0.4624934494495392,
                "z": -0.09931139647960663,
            },
            {
                "x": 0.3297809064388275,
                "y": 0.5583516359329224,
                "z": -0.09851689636707306,
            },
            {
                "x": 0.2816595733165741,
                "y": 0.3671320974826813,
                "z": -0.03332890570163727,
            },
            {
                "x": 0.26679277420043945,
                "y": 0.34874603152275085,
                "z": -0.08437496423721313,
            },
            {
                "x": 0.27393919229507446,
                "y": 0.4681398272514343,
                "z": -0.08294486999511719,
            },
            {
                "x": 0.2856026291847229,
                "y": 0.5587323307991028,
                "z": -0.06880293041467667,
            },
            {
                "x": 0.24132508039474487,
                "y": 0.3869250416755676,
                "z": -0.03412339463829994,
            },
            {"x": 0.228365957736969, "y": 0.344317227602005, "z": -0.07233841717243195},
            {
                "x": 0.22800077497959137,
                "y": 0.4244896173477173,
                "z": -0.07130558043718338,
            },
            {
                "x": 0.23416732251644135,
                "y": 0.4909086525440216,
                "z": -0.06050049886107445,
            },
        ]
        features = calculate_features_from_wrist(hand_landmarks)
        self.assertIn("angles", features)
        self.assertGreater(len(features["angles"]), 0)
        self.assertIn("distances", features)
        self.assertGreater(len(features["distances"]), 0)
        self.assertIn("keypoints", features)
        self.assertGreater(len(features["keypoints"]), 0)
